version: '3.9'

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs

networks:
  kong-net:
    external: false

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    # platform: linux/arm64
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: "admin_access.log"
      KONG_ADMIN_ERROR_LOG: "admin_error.log"
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: "access.log"
      KONG_PROXY_ERROR_LOG: "error.log"
      KONG_PREFIX: ${KONG_PREFIX}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      # KONG_DNS_RESOLVER: "10.13.16.110:8600" # 10.13.16.110:8600,host.docker.internal:8600
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - ./kong_prefix:${KONG_PREFIX}
      - ./kong_tmp:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  konga:
    image: pantsel/konga:0.14.9
    environment:
      DB_ADAPTER: postgres
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_USER: ${KONG_PG_USER}
      DB_PASSWORD: "kong"
      # DB_PASSWORD_FILE: /run/secrets/kong_postgres_password
      DB_DATABASE: ${KONG_PG_DATABASE}
    secrets:
      - kong_postgres_password
    ports:
      - 1337:1337/tcp
    networks:
      - kong-net

  db:
    image: postgres:9.5
    profiles: ["database"]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_USER: ${KONG_PG_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    ports:
      - 5432:5432/tcp
    networks:
      - kong-net
    volumes:
      - ./kong_data:/var/lib/postgresql/data
  
  # consul:
  #   image: consul:1.9.15
  #   restart: on-failure
  #   command: agent -server -bootstrap-expect=1 -client=0.0.0.0 -node=single -datacenter=dc1 -ui
  #   ports:
  #     - 8500:8500/tcp
  #     - 8600:8600/udp
  #   networks:
  #     - kong-net

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD